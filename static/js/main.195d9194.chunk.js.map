{"version":3,"sources":["components/Dashboard.js","App.js","index.js"],"names":["ShipmentList","lazy","socket","io","Dashboard","shipments","setShipments","useState","loading","setLoading","error","setError","useEffect","initialShipmentData","on","console","log","serverShipments","updatedShipment","prevShipments","map","shipment","id","err","disconnect","React","createElement","Suspense","fallback","App","isDarkMode","setIsDarkMode","className","onClick","toggleTheme","document","body","classList","toggle","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"iMAKA,MAAMA,EAAeC,eAAK,IAAM,8BAE1BC,EAASC,YAAG,yBAkEHC,MAhEf,WACI,MAAOC,EAAWC,GAAgBC,mBAAS,KACpCC,EAASC,GAAcF,oBAAS,IAChCG,EAAOC,GAAYJ,mBAAS,MA2CnC,OAzCAK,oBAAU,KAENN,EAAaO,GACbJ,GAAW,GAGXP,EAAOY,GAAG,UAAW,KACjBC,QAAQC,IAAI,iCACZL,EAAS,QAGbT,EAAOY,GAAG,cAAgBG,IACtBX,EAAaW,GACbR,GAAW,KAGfP,EAAOY,GAAG,iBAAmBI,IACzBZ,EAAca,GACVA,EAAcC,IAAKC,GACfA,EAASC,KAAOJ,EAAgBI,GAAKJ,EAAkBG,MAKnEnB,EAAOY,GAAG,aAAc,KACpBC,QAAQC,IAAI,sCACZL,EAAS,8BACTF,GAAW,KAGfP,EAAOY,GAAG,gBAAkBS,IACxBR,QAAQL,MAAM,8BAA+Ba,GAC7CZ,EAAS,gCACTF,GAAW,KAGR,KACHP,EAAOsB,eAEZ,IAECd,EACOe,IAAAC,cAAA,WAAK,UAAQhB,GAGpBF,EACOiB,IAAAC,cAAA,WAAK,wBAIZD,IAAAC,cAAA,WACID,IAAAC,cAAA,UAAI,sBACJD,IAAAC,cAACC,WAAQ,CAACC,SAAUH,IAAAC,cAAA,WAAK,6BAAgC,IACrDD,IAAAC,cAAC1B,EAAY,CAACK,UAAWA,OC5C1BwB,MAlBf,WACE,MAAOC,EAAYC,GAAiBxB,oBAAS,GAO7C,OACEkB,IAAAC,cAAA,OAAKM,UAAU,OACbP,IAAAC,cAAA,UAAQO,QAPQC,KAClBH,GAAeD,GACfK,SAASC,KAAKC,UAAUC,OAAO,eAM1BR,EAAa,aAAe,aAE/BL,IAAAC,cAACtB,EAAS,QCbHmC,IAASC,WAAWL,SAASM,eAAe,SACpDC,OACHjB,IAAAC,cAACD,IAAMkB,WAAU,KACflB,IAAAC,cAACG,EAAG,S","file":"static/js/main.195d9194.chunk.js","sourcesContent":["import React, { useState, useEffect, lazy, Suspense } from 'react'; // Import lazy and Suspense\r\nimport io from 'socket.io-client';\r\n//import ShipmentList from './ShipmentList'; // No longer import directly\r\nimport initialShipmentData from '../data.json';\r\n\r\nconst ShipmentList = lazy(() => import('./ShipmentList')); // Lazy load ShipmentList\r\n\r\nconst socket = io('http://localhost:3001'); // WebSocket connection\r\n\r\nfunction Dashboard() {\r\n    const [shipments, setShipments] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // 1. Load initial data (from data.json)\r\n        setShipments(initialShipmentData);\r\n        setLoading(false);\r\n\r\n        // 2. WebSocket logic\r\n        socket.on('connect', () => {\r\n            console.log('Connected to WebSocket server');\r\n            setError(null);\r\n        });\r\n\r\n        socket.on('initialData', (serverShipments) => {\r\n            setShipments(serverShipments);\r\n            setLoading(false);\r\n        });\r\n\r\n        socket.on('shipmentUpdate', (updatedShipment) => {\r\n            setShipments((prevShipments) =>\r\n                prevShipments.map((shipment) =>\r\n                    shipment.id === updatedShipment.id ? updatedShipment : shipment\r\n                )\r\n            );\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            console.log('Disconnected from WebSocket server');\r\n            setError('Connection to server lost.');\r\n            setLoading(true);\r\n        });\r\n\r\n        socket.on('connect_error', (err) => {\r\n            console.error('WebSocket connection error:', err);\r\n            setError('Failed to connect to server.');\r\n            setLoading(true);\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n\r\n    if (loading) {\r\n        return <div>Loading shipments...</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Shipment Dashboard</h1>\r\n            <Suspense fallback={<div>Loading shipment list...</div>}> {/* Wrap with Suspense */}\r\n                <ShipmentList shipments={shipments} />\r\n            </Suspense>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","// src/App.js\nimport React, { useState } from 'react';\nimport Dashboard from './components/Dashboard';\nimport './index.css';\n\nfunction App() {\n  const [isDarkMode, setIsDarkMode] = useState(false); // Initial state: light mode\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.body.classList.toggle('dark-mode'); // Toggle class on body\n  };\n\n  return (\n    <div className=\"app\">\n      <button onClick={toggleTheme}>\n        {isDarkMode ? 'Light Mode' : 'Dark Mode'}\n      </button>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}